#!/usr/bin/env node
/*
 *********************************************************************************
 *                     Copyright (C) 2018 wystan
 *
 *       filename: load.js
 *    description:
 *        created: 2018-03-22 20:37:06
 *         author: wystan
 *
 *********************************************************************************
 */

// enable unauthorized cert
process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
let WebSocket = require('ws');
let printf = require('printf');


function random(max) {
    return Math.floor(Math.random() * max);
}
/*
 ****************************************************************
 * log utils
 ****************************************************************
 */
let ts = function() {
    return new Date().toISOString();
};

const LOG_VERBOSE = 5;
const LOG_DEBUG   = 4;
const LOG_INFO    = 3;
const LOG_WARN    = 2;
const LOG_ERROR   = 1;
const LOG_NO_LOG  = 0;
let LOG_CUR_LEVEL = LOG_VERBOSE;

const logv = (...args) => LOG_CUR_LEVEL >= LOG_VERBOSE && console.log.apply  (null, ['[V|' + ts() + ']', ...args]);
const logd = (...args) => LOG_CUR_LEVEL >= LOG_DEBUG   && console.log.apply  (null, ['[D|' + ts() + ']', ...args]);
const logi = (...args) => LOG_CUR_LEVEL >= LOG_INFO    && console.info.apply (null, ['[I|' + ts() + ']', ...args]);
const logw = (...args) => LOG_CUR_LEVEL >= LOG_WARN    && console.warn.apply (null, ['[W|' + ts() + ']', ...args]);
const loge = (...args) => LOG_CUR_LEVEL >= LOG_ERROR   && console.error.apply(null, ['[E|' + ts() + ']', ...args]);
const log  = (...args) => process.stdout.write(...args);
const progress = ["-", "\\", "|", "/"];

/*
 ****************************************************************
 * error number defination
 ****************************************************************
 */
const ERRNO = {
    SUCC       : 0,
    SERVER_ERR : 1,
    CONN_ERR   : 2,
};

/*
 ****************************************************************
 * event emitter
 ****************************************************************
 */
class Emitter {
    constructor() {
        this._handlers = Object.create(null);
    };

    /**
     * register the event with a handler
     * @param  {string}     event
     * @param  {function}   handler
     * @return {NA}         NA
     */
    on(event, handler) {
        this._handlers[event] = this._handlers[event] || [];
        handler._once = false;
        this._handlers[event].push(handler);
    };

    /**
     * same as on but just run once when the given event fired
     * @param  {string}     event
     * @param  {function}   handler
     * @return {NA}         NA
     */
    once(event, handler) {
        this._handlers[event] = (this._handlers[event] || []);
        handler._once = true;
        this._handlers[event].push(handler);
    };

    /**
     * turn off the event handler
     * @param  {string}     event
     * @param  {function}   handler
     * @return {NA}         NA
     */
    off(event, handler) {
        let handlers = this._handlers[event];
        if (!handlers) return;
        handlers.splice(handlers.indexOf(handler)>>>0, 1);
    };

    /**
     * fire the event with arguments
     * @param  {string}     event
     * @return {NA}         NA
     */
    emit(event, ...args) {
        let emitter = this;
        (this._handlers[event] || []).slice().map(function(handler){
            if(handler._once) {
                emitter.off(event, handler);
            }
            handler(...args);
        });
    };

    /**
     * fire the event with arguments asynchronously
     * @param  {string}     event
     * @return {NA}         NA
     */
    aemit(event, ...args) {
        let emitter = this;
        let promise = new Promise(function (resolve, reject) {
            resolve();
        }).then(function () {
            emitter.emit(event, ...args);
        });
    };

    check(event) {
        return (this._handlers[event] && this._handlers[event].length > 0);
    };
};

/*
 ****************************************************************
 * report classes
 ****************************************************************
 */
class WorkerReport
{    constructor() {
        this.start           = 0;
        this.end             = 0;
        this.total_request   = 0;
        this.total_response_ms   = 0;
        this.min_response_ms = Number.MAX_VALUE;
        this.max_response_ms = 0;
        this.result          = ERRNO.SUCC;
    }
};

class MainReport {
    constructor(argv, emitter) {
        this.url               = argv.url;
        this.connections       = argv.amount;
        this.cocurrency        = argv.cocurrency;
        this.tps               = 0;
        this.total_response_ms = 0;
        this.max_response_ms   = 0;
        this.min_response_ms   = Number.MAX_VALUE;
        this.avg_response_ms   = 0;
        this.total_request     = 0;
        this.duration_in_sec   = 0;
        this.start_time        = new Date();
        this.end_time          = new Date();
        this.errors            = 0;

        this.total_report_    = 0;
        this.reporter_handler = this.worker_report.bind(this);
        this.emitter_         = emitter;
    }

    start() {
        this.emitter_.on("worker-report", this.reporter_handler);
        this.start_time = new Date();
    }
    stop() {
        this.emitter_.off("worker-report", this.reporter_handler);
        this.end_time = new Date();
        this.duration_in_sec = (this.end_time - this.start_time) / 1000;
        this.tps = this.total_request / this.duration_in_sec;
        this.avg_response_ms = this.total_response_ms / this.total_request;
    }
    worker_report(report, nothing1, nothing2) {
        this.total_request += report.total_request;
        this.total_response_ms += (report.total_response_ms);
        if (this.min_response_ms > report.min_response_ms) {
            this.min_response_ms = report.min_response_ms;
        }
        if (this.max_response_ms < report.max_response_ms) {
            this.max_response_ms = report.max_response_ms;
        }
        if (report.result != ERRNO.SUCC) {
            this.errors++;
        }
        log("running: "+progress[this.total_report_++ % 4] + "\r");
    }

    generate() {
        let a = '\n';
        a += printf("%18s : %s\n", "url", this.url);
        a += printf("%18s : %d\n", "connections", this.connections);
        a += printf("%18s : %d\n", "cocurrency", this.cocurrency);
        a += printf("%18s : %d\n", "tps", this.tps);
        a += printf("%18s : %d\n", "avg_response_ms", this.avg_response_ms);
        a += printf("%18s : %d\n", "max_response_ms", this.max_response_ms);
        a += printf("%18s : %d\n", "min_response_ms", this.min_response_ms);
        a += printf("%18s : %d\n", "total_request", this.total_request);
        a += printf("%18s : %d\n", "total_response_ms", this.total_response_ms);
        a += printf("%18s : %d\n", "duration_in_sec", this.duration_in_sec);
        a += printf("%18s : %s\n", "start_time", this.start_time.toISOString());
        a += printf("%18s : %s\n", "end_time", this.end_time.toISOString());
        a += printf("%18s : %d\n", "errors", this.errors);
        console.log(a);
    }
};

/*
 ****************************************************************
 * main classes
 ****************************************************************
 */
class ConnectionPool {
    constructor(size, url, emitter) {
        this.conn_pool = [];
        this.active_pool = [];
        this.listener  = emitter;
        let pool = this;
        for (let i=0; i<size; i++) {
            let ws = new WebSocket(url);
            ws.on('open', function() {
                pool.conn_pool.push(ws);
                log(printf("\ropening connection:%8d\r", pool.conn_pool.length));
                if (pool.conn_pool.length >= size) {
                    logi("all connections created");
                    pool.listener.emit("connection-pool:created");
                }
            });
            ws.on('close', function() {
                pool.conn_pool.splice(pool.conn_pool.indexOf(ws)>>>0, 1);
                log(printf("\rclosing connection:%8d\r", pool.conn_pool.length));
                if (pool.conn_pool.length === 0) {
                    logi("all connections closed");
                    pool.listener.emit("connection-pool:closed");
                }
            });
            ws.on('error', function() {
                logw("connection error");
            });
        }
    }
    get() {
        return this.active_pool.pop();
    }
    put(element) {
        if (this.conn_pool.indexOf(element) >= 0) {
            this.active_pool.push(element);
        }
    }
    start() {
        logd("start connection pool");
        let pool = this;
        pool.conn_pool.forEach(ws => pool.active_pool.push(ws));
    }
    stop() {
        logd("stop connection pool");
        this.active_pool = [];
    }
    close() {
        logi("close all connections ...");
        this.conn_pool.forEach(ws => ws.close());
    }
};

class WorkerGroup {
    constructor(size) {
        this.workers = [];
        this.factory = new WorkerFactory();
        while(size > 0) {
             this.workers.push(this.factory.create("random"));
            size--;
        }
        this.pool = null;
        this.exit = 1;
    }
    run(pool, emitter) {
        this.pool = pool;
        this.exit = 0;
        this.emitter_ = emitter;
        emitter.on("worker-report", this.on_report.bind(this));
        logi("worker group run.");
        for (let worker of this.workers) {
            let conn = pool.get();
            if (conn) {
                worker.run(conn, emitter);
            }
        }
    }
    stop() {
        this.exit = 1;
        for (let worker of this.workers) {
            worker.stop();
        }
        logd("worker group stop");
    }

    on_report(nothing, conn, worker) {
        if (this.exit) return;
        this.pool.put(conn);
        let new_conn = this.pool.get();
        worker.run(new_conn, this.emitter_);
    }
};

class Worker {
    constructor() {}
    run(conn) {}
    stop() {}
};

class RandomWorker extends Worker {
    constructor() {
        super();
    }
    run(conn, emitter) {
        let worker = this;
        setTimeout(()=>{
            let report = new WorkerReport();
            report.result          = random(3);
            report.total_response_ms   = random(50);
            report.max_response_ms = random(80);
            report.min_response_ms = random(20);
            report.total_request   = random(4);
            emitter.aemit("worker-report", report, conn, worker);
        }, random(100));
    }
    stop() {}
};

class WorkerFactory {
    create(type) {
        if(type === "random") {
            return new RandomWorker();
        } else {
            return null;
        }
    }
};

class LoadRunner {
    constructor(argv) {
        this.url         = argv.url;
        this.connections = argv.amount;
        this.cocurrency  = argv.cocurrency;
        this.seconds     = argv.time;
        this.emitter_    = new Emitter();
        this.main_report = new MainReport(argv, this.emitter_);

        this.emitter_.once('exit', this.on_exit.bind(this));
        this.emitter_.once("connection-pool:created", this.on_pool_created.bind(this));

        logd('options:', this.url, this.connections, this.cocurrency, this.seconds);
    }

    run() {
        this.cpool = new ConnectionPool(this.connections, this.url, this.emitter_);
        this.worker_group = new WorkerGroup(this.cocurrency);
    }

    on_exit() {
        let runner = this;
        runner.main_report.stop();
        runner.worker_group.stop();
        runner.cpool.stop();
        runner.cpool.close();
        runner.main_report.generate();
    }
    on_pool_created() {
        let runner = this;
        runner.main_report.start();
        runner.cpool.start();
        runner.worker_group.run(runner.cpool, this.emitter_)
        setTimeout(function() {
            runner.emitter_.emit('exit');
        }, runner.seconds*1000);
    }
};

/*
 ****************************************************************
 * entry
 ****************************************************************
 */
function main() {
    let yargs = require("yargs")
        .option('u', {
            alias: 'url',
            default: 'wss://serverip/random',
            describe: 'websocket url',
        })
        .option('a', {
            alias: 'amount',
            default: 1,
            type: 'number',
            describe: 'connections you want to create'
        })
        .option('c', {
            alias: 'cocurrency',
            default: 1,
            type: 'number',
            describe: 'cocurrency per second'
        })
        .option('t', {
            alias: 'time',
            default: 2,
            type: 'number',
            describe: 'seconds you want to run'
        })
        .help('h').alias('h', 'help')
        .usage("usage: load [options]")
        .version(false)
        .wrap(null);

    let argv = yargs.argv;
    let runner = new LoadRunner(argv);
    runner.run();
}

main();

/************************************* END **************************************/
